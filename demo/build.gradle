plugins {
    id 'java-library'
    id 'application' // Для заупуска демострации. В конечном варианте поставщика данных эта строка не требуется.
	id 'eclipse'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
}

version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
	mavenLocal()
    mavenCentral()
}

dependencies {
    // Используем project в зависимости для удобства - не надо публиковать основные модули для запуска демострации.
    // Полноценный поставщик данных должен будет использовать репозиторий.
    implementation project(':lib')
    implementation project(':app')
//	implementation 'moviechecker:lib:0.0.1-SNAPSHOT'
//  implementation 'moviechecker:app:0.0.1-SNAPSHOT'

	implementation 'org.springframework.boot:spring-boot-starter:3.1.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.0.4'

    runtimeOnly 'com.h2database:h2:2.1.214'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.1.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Для заупуска демострации. В конечном варианте поставщика данных эта строка не требуется.
mainClassName = 'moviechecker.CheckerMain'
